import logging
import traceback
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°—Ç–∞–Ω–∏ ---
CHOOSING_PRODUCT, ASK_EMAIL, PAYMENT_DECISION, NEXT_STEP = range(4)

# --- Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "smooth-calling-470117-h2-5475aabd3ec1.json", scope
)
client = gspread.authorize(creds)
sheet = client.open("Name2").sheet1


# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üõí –¢–æ–≤–∞—Ä 1", callback_data="–¢–æ–≤–∞—Ä 1")],
        [InlineKeyboardButton("üõí –¢–æ–≤–∞—Ä 2", callback_data="–¢–æ–≤–∞—Ä 2")],
        [InlineKeyboardButton("üõí –¢–æ–≤–∞—Ä 3", callback_data="–¢–æ–≤–∞—Ä 3")],
        [InlineKeyboardButton("üõí –¢–æ–≤–∞—Ä 4", callback_data="–¢–æ–≤–∞—Ä 4")],
    ]
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSING_PRODUCT


async def choose_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["product"] = query.data

    await query.edit_message_text(f"–í–∏ –æ–±—Ä–∞–ª–∏ {query.data}. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à email:")
    return ASK_EMAIL


async def save_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text
    product = context.user_data.get("product")

    # –ó–Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≤—ñ–ª—å–Ω–∏–π —Ä—è–¥–æ–∫
    next_row = len(sheet.get_all_values()) + 1
    sheet.update(f"A{next_row}:B{next_row}", [[product, email]])

    context.user_data["row"] = next_row

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–≤", callback_data="paid")],
        [InlineKeyboardButton("‚è≥ –û–ø–ª–∞—á—É –ø—ñ–∑–Ω—ñ—à–µ", callback_data="later")],
    ]
    await update.message.reply_text("–í–∏ –±–∞–∂–∞—î—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))
    return PAYMENT_DECISION


async def payment_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    row = context.user_data["row"]
    decision = "–û–ø–ª–∞—á–µ–Ω–æ" if query.data == "paid" else "–í—ñ–¥–∫–ª–∞–¥–µ–Ω–æ"

    sheet.update(f"C{row}", [[decision]])

    keyboard = [
        [InlineKeyboardButton("üõç –î–æ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="restart_products")],
        [InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="restart_main")],
    ]
    await query.edit_message_text("–î—è–∫—É—î–º–æ! –©–æ –¥–∞–ª—ñ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return NEXT_STEP


async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "restart_products":
        return await start(query, context)
    else:
        await query.edit_message_text("–í—ñ—Ç–∞—é! –í–∏ –∑–Ω–æ–≤—É –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π. –í–≤–µ–¥—ñ—Ç—å /start")
        return ConversationHandler.END


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Exception: %s", traceback.format_exc())


def main():
    app = ApplicationBuilder().token("5387944433:AAH5rqjcxdHOJ3itGKUg8-BZu_jrfyybUF0").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_PRODUCT: [CallbackQueryHandler(choose_product)],
            ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_email)],
            PAYMENT_DECISION: [CallbackQueryHandler(payment_decision)],
            NEXT_STEP: [CallbackQueryHandler(next_step)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)

    app.run_polling()


if __name__ == "__main__":
    main()
